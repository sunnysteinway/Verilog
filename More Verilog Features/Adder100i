module top_module( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );
    
    FADD add0 (a[0], b[0], cin, sum[0], cout[0]);
    FADD add1 (a[1], b[1], cout[(0)], sum[1], cout[1]);                                                                                                 
    FADD add2 (a[2], b[2], cout[(1)], sum[2], cout[2]);                                                                                                 
    FADD add3 (a[3], b[3], cout[(2)], sum[3], cout[3]);                                                                                                 
    FADD add4 (a[4], b[4], cout[(3)], sum[4], cout[4]);
    // keeps on going...
    FADD add96 (a[96], b[96], cout[(95)], sum[96], cout[96]);                                                                                           
    FADD add97 (a[97], b[97], cout[(96)], sum[97], cout[97]);                                                                                           
    FADD add98 (a[98], b[98], cout[(97)], sum[98], cout[98]);                                                                                           
    FADD add99 (a[99], b[99], cout[(98)], sum[99], cout[99]);
    
endmodule

module FADD( 
    input a, b, cin,
    output sum, cout);
    
    wire cout1, cout2, sum1;
    
    HADD add1 (a, b, sum1, cout1);
    HADD add2 (cin, sum1, sum, cout2);
    assign cout = cout1 | cout2;

endmodule

module HADD( 
    input a, b,
    output sum, cout);
    
    assign sum = a ^ b;
    assign cout = a & b;

endmodule

/*
module top_module
    #(parameter N = 100)
    ( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );
    
    FADD add0 (a[0], b[0], cin, sum[0], cout[0]);
    
    always @ (*) begin
        genvar i;
        generate
            for (i = 1; i < N; i = i + 1) begin
            FADD addi (a[i], b[i], cout[(i - 1)], sum[i], cout[i]);
            end
        endgenerate
    end

endmodule

module FADD( 
    input a, b, cin,
    output sum, cout);
    
    wire cout1, cout2, sum1;
    
    HADD add1 (a, b, sum1, cout1);
    HADD add2 (cin, sum1, sum, cout2);
    assign cout = cout1 | cout2;

endmodule

module HADD( 
    input a, b,
    output sum, cout);
    
    assign sum = a ^ b;
    assign cout = a & b;

endmodule
*/


//instance array
